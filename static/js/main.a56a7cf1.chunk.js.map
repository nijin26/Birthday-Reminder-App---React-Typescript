{"version":3,"sources":["components/AddItem/AddItem.tsx","components/ListItem/ListItem.tsx","components/TodaysList/TodaysList.tsx","components/TomorrowsList/TomorrowsList.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","App.module.scss","components/AddItem/AddItem.module.scss","components/ListItem/ListItem.module.scss","components/TodaysList/TodaysList.module.scss","components/TomorrowsList/TomorrowsList.module.scss"],"names":["AddItem","props","nameRef","useRef","imageRef","useState","Date","selectedDate","setSelectedDate","onSubmit","e","preventDefault","enteredName","current","value","enteredImageLink","data","id","Math","random","toString","getTime","addItem","className","classes","container","close_btn","onClick","close","htmlFor","type","ref","selected","onChange","date","showMonthDropdown","showYearDropdown","maxDate","placeholderText","scrollableYearDropdown","wrapperClassName","datePicker","container_btn","ListItem","updatedDateString","moment","fromNow","split","filter","str","join","list","src","image","alt","list_content","name","delete","bind","TodaysList","today","setToday","todaysDate","format","useEffect","updatedData","List","item","heading","length","map","TomorrowsList","tomorrow","setTomorrow","tomorrowsDate","setDate","getDate","App","React","datas","setData","tab","setTab","toggle","setToggle","localData","localStorage","getItem","prevState","JSON","parse","setItem","stringify","deleteItemHandler","btn","container_tab","cx","active","tab_content","style","display","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.a56a7cf1.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport { ItemModel } from \"./ItemModel\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport classes from \"./AddItem.module.scss\";\n\ninterface AddItemModel {\n  addItem: (data: ItemModel) => void;\n  close: () => void;\n}\n\nconst AddItem: React.FC<AddItemModel> = (props: AddItemModel) => {\n  const nameRef = useRef<HTMLInputElement>(null);\n  const imageRef = useRef<HTMLInputElement>(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  const submitHandler = (e: React.FormEvent) => {\n    e.preventDefault();\n    const enteredName = nameRef.current!.value;\n    const enteredImageLink = imageRef.current!.value;\n    const data = {\n      id: Math.random().toString(),\n      enteredName,\n      selectedDate: selectedDate.getTime(),\n      enteredImageLink,\n    };\n\n    props.addItem(data);\n  };\n\n  return (\n    <form onSubmit={submitHandler} className={classes.container}>\n      <button className={classes.close_btn} onClick={props.close}>\n        x\n      </button>\n      <label htmlFor=\"inputName\">Name:</label>\n      <input type=\"text\" id=\"inputName\" ref={nameRef} />\n      <label htmlFor=\"inputDate\">Date Of Birth:</label>\n      <DatePicker\n        selected={selectedDate}\n        onChange={(date: Date) => setSelectedDate(date)}\n        showMonthDropdown\n        showYearDropdown\n        maxDate={new Date(new Date())}\n        placeholderText=\"Select Birth Date\"\n        scrollableYearDropdown\n        wrapperClassName={classes.datePicker}\n      />\n      <label htmlFor=\"image\">Image Link:</label>\n      <input type=\"text\" id=\"image\" ref={imageRef} />\n      <button type=\"submit\" className={classes.container_btn}>\n        Add Reminder\n      </button>\n    </form>\n  );\n};\n\nexport default AddItem;\n","import React from \"react\";\nimport moment from \"moment\";\n\nimport classes from \"./ListItem.module.scss\";\n\ninterface ListModel {\n  id?: string;\n  name: string;\n  date: number;\n  image: string;\n  delete: (id: string) => void;\n}\n\nconst ListItem: React.FC<ListModel> = (props: ListModel) => {\n  const relativeDate = moment(props.date).fromNow().split(\" \");\n  const updatedDateString: string = relativeDate\n    .filter((str) => str !== \"ago\")\n    .join(\" \");\n\n  return (\n    <li className={classes.list}>\n      <img\n        src={\n          props.image\n            ? props.image\n            : \"https://www.kindpng.com/picc/m/22-223965_no-profile-picture-icon-circle-member-icon-png.png\"\n        }\n        alt=\"\"\n      />\n      <div className={classes.list_content}>\n        <h3>{props.name}</h3>\n        <p> {updatedDateString}</p>\n        <button onClick={props.delete.bind(null, props.id!)}>X</button>\n      </div>\n    </li>\n  );\n};\n\nexport default ListItem;\n","import { useState, useEffect } from \"react\";\nimport moment from \"moment\";\n\nimport { ItemModel } from \"../AddItem/ItemModel\";\nimport ListItem from \"../ListItem/ListItem\";\n\nimport classes from \"./TodaysList.module.scss\";\n\ninterface ReceivingListModel {\n  List: ItemModel[];\n  delete: (id: string) => void;\n}\n\nconst TodaysList: React.FC<ReceivingListModel> = (props) => {\n  const [today, setToday] = useState<ItemModel[]>([]);\n\n  const todaysDate = new Date(moment(new Date()).format(\"MMM DD\")).getTime();\n\n  useEffect(() => {\n    const updatedData = props.List?.filter((item) => {\n      const formattedDate = new Date(\n        moment(item.selectedDate).format(\"MMM DD\")\n      ).getTime();\n      return formattedDate === todaysDate;\n    });\n    setToday(updatedData);\n  }, [props.List, todaysDate]);\n\n  return (\n    <div>\n      <h3 className={classes.heading}>\n        {today.length > 1\n          ? `${today.length} Birthdays Today`\n          : `${today.length} Birthday Today`}\n      </h3>\n\n      {today.map((item) => (\n        <ListItem\n          key={item.id}\n          id={item.id}\n          name={item.enteredName}\n          date={item.selectedDate}\n          image={item.enteredImageLink}\n          delete={props.delete}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TodaysList;\n","import { useState, useEffect } from \"react\";\nimport { ItemModel } from \"../AddItem/ItemModel\";\nimport ListItem from \"../ListItem/ListItem\";\n\nimport moment from \"moment\";\n\nimport classes from \"./TomorrowsList.module.scss\";\n\ninterface ReceivingListModel {\n  List: ItemModel[];\n  delete: (id: string) => void;\n}\n\nconst TomorrowsList: React.FC<ReceivingListModel> = (props) => {\n  const [tomorrow, setTomorrow] = useState<ItemModel[]>([]);\n\n  const tomorrowsDate = new Date(\n    moment(new Date().setDate(new Date().getDate() + 1)).format(\"MMM DD\")\n  ).getTime();\n\n  useEffect(() => {\n    const updatedData = props.List?.filter((item) => {\n      const formattedDate = new Date(\n        moment(item.selectedDate).format(\"MMM DD\")\n      ).getTime();\n      return formattedDate === tomorrowsDate;\n    });\n    setTomorrow(updatedData);\n  }, [props.List, tomorrowsDate]);\n\n  return (\n    <div>\n      <h3 className={classes.heading}>\n        {tomorrow.length > 1\n          ? `${tomorrow.length} Birthdays Tomorrow`\n          : `${tomorrow.length} Birthday Tomorrow`}\n      </h3>\n\n      {tomorrow.map((item) => (\n        <ListItem\n          key={item.id}\n          id={item.id}\n          name={item.enteredName}\n          date={item.selectedDate}\n          image={item.enteredImageLink}\n          delete={props.delete}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TomorrowsList;\n","import React from \"react\";\nimport { ItemModel } from \"./components/AddItem/ItemModel\";\nimport AddItem from \"./components/AddItem/AddItem\";\nimport TodaysList from \"./components/TodaysList/TodaysList\";\nimport TomorrowsList from \"./components/TomorrowsList/TomorrowsList\";\n\nimport classes from \"./App.module.scss\";\nimport cx from \"classnames\";\n\nconst App: React.FC = () => {\n  const [datas, setData] = React.useState<ItemModel[]>([]);\n  const [tab, setTab] = React.useState<string>(\"today\");\n  const [toggle, setToggle] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    const localData = localStorage.getItem(\"dataList\");\n    if (localData) {\n      setData((prevState) => [...prevState, ...JSON.parse(localData)]);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    localStorage.setItem(\"dataList\", JSON.stringify(datas));\n  });\n\n  const addItemHandler = (data: ItemModel) => {\n    setData((prevState) => [...prevState, data]);\n  };\n\n  const deleteItemHandler = (id: string) => {\n    setData((prevState) => prevState.filter((item) => item.id !== id));\n  };\n\n  return (\n    <div className={classes.container}>\n      <h2>Birthday Reminder</h2>\n      {toggle ? (\n        <AddItem addItem={addItemHandler} close={() => setToggle(false)} />\n      ) : (\n        <button className={classes.btn} onClick={() => setToggle(true)}>\n          Set a Reminder\n        </button>\n      )}\n\n      <ul className={classes.container_tab}>\n        <li className={cx({ [classes.active]: tab === \"today\" })}>\n          <div onClick={() => setTab(\"today\")}>\n            <span>Today</span>\n          </div>\n        </li>\n        <li className={cx({ [classes.active]: tab === \"tomorrow\" })}>\n          <div onClick={() => setTab(\"tomorrow\")}>\n            <span>Tomorrow</span>\n          </div>\n        </li>\n      </ul>\n      <div\n        className={classes.tab_content}\n        style={tab === \"today\" ? { display: \"block\" } : { display: \"none\" }}\n      >\n        <TodaysList List={datas} delete={deleteItemHandler} />\n      </div>\n      <div\n        className={classes.tab_content}\n        style={tab === \"tomorrow\" ? { display: \"block\" } : { display: \"none\" }}\n      >\n        <TomorrowsList List={datas} delete={deleteItemHandler} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"container_tab\":\"App_container_tab__19ZZC\",\"active\":\"App_active__2jQ78\",\"btn\":\"App_btn__1exFK\",\"tab_content\":\"App_tab_content__2Wv3q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddItem_container__2yJeF\",\"intro\":\"AddItem_intro__3Aq93\",\"container_btn\":\"AddItem_container_btn__1YfpK\",\"datePicker\":\"AddItem_datePicker__2tV8N\",\"tab_content\":\"AddItem_tab_content__2aWUl\",\"close_btn\":\"AddItem_close_btn__3ZLu8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ListItem_list__O2BqR\",\"list_content\":\"ListItem_list_content__1-Cqr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"TodaysList_heading__2ODPJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"TomorrowsList_heading__3Z0N5\"};"],"sourceRoot":""}